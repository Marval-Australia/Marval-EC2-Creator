AWSTemplateFormatVersion: 2010-09-09
Outputs:
  APIKey:
    Value: !GetAtt SampleString.RandomString
    Description: "The API key to use in the header as x-api-key"
  GatewayID:
    Description: The endpoint of the API request to use
    Value: 
      !Join
        - ''
        - - 'https://'
          - !Ref APIGatewayRestAPI
          - '.execute-api.'
          - !Ref AWS::Region
          - '.amazonaws.com/'
          - !Ref EnvironmentName
          - '/'
          - !Ref APIName
Resources:
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - APIGatewayDeployment
    Properties:
      Description: Created by Cloudformation template !Ref AWS::StackName
      Enabled: 'true'
      Value: !GetAtt SampleString.RandomString
      StageKeys:
        - RestApiId: !Ref APIGatewayRestAPI
          StageName: Prod
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiKey
      - UsagePlan
    Properties: 
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: LambdaFuncName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: 'true'
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - APIGatewayResource
      - LambdaFunction
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
  UsagePlan:
    DependsOn:
      - APIGatewayDeployment
      - ApiKey
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref APIGatewayRestAPI
          Stage: !Ref EnvironmentName
      Description: MarvalEC2UsagePlan
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: MarvalEC2Plan
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  IAMRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: Allow
                Action:
                    - 'ses:SendEmail'
                    - 'ses:SendRawEmail'
                Resource: '*'
  SampleString:
    DependsOn:
      - RandomStringLambdaFunction
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 20
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn
  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
                const response = require("cfn-response");
                const randomString = (length, chars) => {
                    var result = '';
                    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
                    return result;
                }
                
                exports.handler = (event, context) => {
                  const str = randomString(event['ResourceProperties']['Length'], '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
                  const responseData = {RandomString: str};
                  response.send(event, context, response.SUCCESS, responseData);
                };
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn
      MemorySize: 128
      Timeout: 20

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Timeout: 100
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn  
      Code:
        ZipFile:  |
          var AWS = require('aws-sdk');
          var ec2 = new AWS.EC2();

          exports.handler = async (event) => {
          // TODO implement
          console.log("Have event as ", event);
          console.log("Have body as ", event.body);
          var EventBody = JSON.parse(event.body);
          var NotificationAddress = EventBody.NotificationEmailAddress;
          var NotificationFromAddress = EventBody.NotificationFromAddress;
          var RequestNumber = EventBody.RequestNumber;
          var ServerName = EventBody["Server Name"] ? EventBody["Server Name"] : EventBody["ServerName"];

          var ImageRequest = {
          LaunchTemplate: { LaunchTemplateId: EventBody.TemplateID },
          MaxCount: 1, MinCount: 1, TagSpecifications: [{
          "ResourceType": "instance",
          Tags: [{ Key: "Name", Value: ServerName }, { Key: "RequestNumber", Value: RequestNumber }]
          }]
          };

          var filterParams = {
          Filters: [
          { Name: "tag:Name", Values: [ServerName] },
          { Name: "instance-state-name", Values: ["running", "pending"] }
          ]
          };

          console.log("Have Tempalte ID as ", EventBody.TemplateID);
          console.log("Creating instance with request ", ImageRequest);
          console.log("Have tags as ", ImageRequest.TagSpecifications[0].Tags);
          console.log("Filter params are %s ", filterParams)
          const promise = new Promise(function (resolve, reject) {


          ec2.describeInstances(filterParams, function (err, data) {
          if (err) {

          const response = {
          statusCode: 400,
          body: JSON.stringify(err),
          };
          console.log("Error describing instances with params ", filterParams);
          console.log(err, err.stack);
          resolve(response);
          }
          else {
          console.log("Have instances data as ", data);
          if (data.Reservations.length > 0) {
          const response = {
          statusCode: 200,
          body: JSON.stringify("Instance already exists, will not re-create instance"),
          };
          resolve(response);
          console.log("Instance already exists, will not re-create instance.");
          } else {
          console.log("Instance with name %s does not exist already", ServerName);

          ec2.runInstances(ImageRequest, function (err, data) {
          if (err) {
          console.log(err, err.stack);
          const response = {
          statusCode: 400,
          body: JSON.stringify(err),
          };
          resolve(response);
          } else {
          console.log("Successfully create instance with data ", data);
          var params = {
          InstanceIds: [data.Instances[0].InstanceId]
          };
          ec2.waitFor('instanceRunning', params, function (err, data) {
          if (err) {

          console.log(err, err.stack);
          const response = {
          statusCode: 400,
          body: JSON.stringify(err),
          };
          resolve(response);
          } else {

          if (NotificationAddress) {
          var Message = "Your instance has been created successfully, your address to navigate to Marval is http://" + data.Reservations[0].Instances[0].PublicIpAddress + "/MSM/";
          var S3SendEmailParams = {
          Destination: { ToAddresses: [NotificationAddress] },
          Message: {
            Body: { Text: { Data: Message } },
            Subject: { Data: "Marval Instance created" }
          }, Source: NotificationFromAddress
          };
          AWS.config.update({ region: 'us-east-1' });

          var sendEmailPromise = new AWS.SES({ apiVersion: '2010-12-01' }).sendEmail(S3SendEmailParams).promise();

          sendEmailPromise.then(
          function (data) {
            console.log("Sent email message");
            console.log(data.MessageId);

            console.log(data);
            console.log("Public IP is ", data.Reservations[0].Instances[0].PublicIpAddress);
            const response = {
                statusCode: 200,
                body: JSON.stringify(data),
            };

            resolve(response);
          }).catch(
            function (err) {
                const response = {
                    statusCode: 200,
                    body: JSON.stringify(data),
                };
                console.log("Error sending email message");
                resolve(response);
                console.error(err, err.stack);
            });
          } else {
          console.log(data);
          console.log("Public IP is ", data.Reservations[0].Instances[0].PublicIpAddress);
          const response = {
          statusCode: 200,
          body: JSON.stringify(data),
          };

          resolve(response);
          }
          }
          });

          // const response = {
          //   statusCode: 200,
          //    body: JSON.stringify(data),
          //  };
          // resolve(response);
          }

          });
          }
          }
          });
          });
          return promise;
          };

Parameters:
  LambdaFuncName:
    Type: String
    Default: MarvalEC2Create
  APIName:
    Type: String
    Default: MarvalEC2Create
  EnvironmentName:
    Type: String
    Default: Prod
